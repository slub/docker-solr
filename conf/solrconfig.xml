<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--
		For more details about configurations options that may appear in this
		file, see http://wiki.apache.org/solr/SolrConfigXml.

		Specifically, the Solr Config can support XInclude, which may make it easier to manage
		the configuration.  See https://issues.apache.org/jira/browse/SOLR-1167
-->
<config>
	<!--
		Set this to "false" if you want Solr to continue working even if there
		is an error in your configuration.
		You may want to set this to "false" in a production environment, but to
		"true" for testing purposes.
	-->
	<abortOnConfigurationError>${solr.abortOnConfigurationError:false}</abortOnConfigurationError>

	<!--
		Controls what version of Lucene various components of Solr
		adhere to.  Generally, you want to use the latest version to
		get all bug fixes and improvements. It is highly recommended
		that you fully re-index after changing this setting as it can
		affect both how text is indexed and queried.
	-->
	<luceneMatchVersion>LUCENE_35</luceneMatchVersion>

	<!--
		Here you should mention all directories containing plugin files, which
		are used in solrconfig.xml or schema.xml. Everything contained in the
		optional "./lib" directory under the Solr home path is always included,
		so the following is just an example which does not make any sense.
		If you are using Solr only in conjunction with DLF you can leave this
		unchanged because you will not need any other than the standard plugins.
	-->
	<!-- <lib dir="./lib" /> -->

	<!--
		Specify the directory where Lucene should save its index files. Please
		notice that using a NFS mount here is possible but not recommended!
	-->
	<dataDir>${solr.core.dataDir}</dataDir>

	<indexDefaults>
		<!--
			Set this to "false" if you want Lucene to split the index in multiple
			files. Updating will be slightly faster, but searching a bit slower.
		-->
		<useCompoundFile>true</useCompoundFile>

		<!--
			Specify the allowed number of index segments before segments are merged
			together. Higher values will result in faster indexing and less system
			load, but slower searches.
		-->
		<mergeFactor>15</mergeFactor>

		<!--
			Specify how many documents or memory should be buffered before the data
			is written to a segment file. Whatever limit is reached first will result
			in a flush.
		-->
		<maxBufferedDocs>500</maxBufferedDocs>
		<ramBufferSizeMB>64</ramBufferSizeMB>

		<!--
			Specify how many tokens may be in one field. The latter should not be too low
			because excess tokens will be discarded.
		-->
		<maxFieldLength>10000</maxFieldLength>

		<!-- Specify the timeouts for writing to the index and committing changes. -->
		<writeLockTimeout>1000</writeLockTimeout>
		<commitLockTimeout>10000</commitLockTimeout>

		<!--
			Specify how Lucene should merge index segments. The given values are
			Lucene's standard since version 3.3, so just leave this unchanged as long
			as you do not need backwards compatibility for some reasons.
		-->
		<mergePolicy class="org.apache.lucene.index.TieredMergePolicy" />
		<mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler" />

		<!--
			Specify which file locking mechanism Lucene should use. The options are:
			single = use no file locking at all (not recommended!)
			native = use the system's standard locking method
			simple = use a plain file for locking
		-->
		<lockType>native</lockType>
	</indexDefaults>

	<!-- Here you can override some default settings from above for a specific index. -->
	<mainIndex>
		<!--
			If true, unlock any held write or commit locks on startup.
			This defeats the locking mechanism that allows multiple
			processes to safely access a lucene index, and should be
			used with care.
			This is not needed if lock type is 'none' or 'single'
		-->
		<unlockOnStartup>false</unlockOnStartup>

		<!--
			If true, IndexReaders will be reopened (often more efficient) instead
			of closed and then opened.
		-->
		<reopenReaders>true</reopenReaders>

		<!-- Here you can change the deletion policy. This should be left unchanged! -->
		<deletionPolicy class="solr.SolrDeletionPolicy">
			<str name="maxCommitsToKeep">1</str>
			<str name="maxOptimizedCommitsToKeep">0</str>
			<!-- <str name="maxCommitAge">30MINUTES</str> -->
			<!-- <str name="maxCommitAge">1DAY</str> -->
		</deletionPolicy>

		<!--
			To aid in advanced debugging, you may turn on IndexWriter debug logging.
			Setting to true will set the file that the underlying Lucene IndexWriter
			will write its debug infostream to.
		-->
		<infoStream file="INFOSTREAM.txt">false</infoStream>
	</mainIndex>

	<!--
		Enables JMX if and only if an existing MBeanServer is found, use this
		if you want to configure JMX through JVM parameters. Remove this to disable
		exposing Solr configuration and statistics to JMX.

		If you want to connect to a particular server, specify the agentId
		e.g. <jmx agentId="myAgent" />

		If you want to start a new MBeanServer, specify the serviceUrl
		e.g <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>

		For more details see http://wiki.apache.org/solr/SolrJmx
	-->
	<jmx />

	<updateHandler class="solr.DirectUpdateHandler2">
		<!--
			Perform a <commit/> automatically under certain conditions:
			maxDocs - number of updates since last commit is greater than this
			maxTime - oldest uncommited update (in ms) is this long ago
			Instead of enabling autoCommit, consider using "commitWithin"
			when adding documents. http://wiki.apache.org/solr/UpdateXmlMessages
		-->
		<!-- <autoCommit>
			<maxDocs>10000</maxDocs>
			<maxTime>1000</maxTime>
		</autoCommit> -->

		<!--
			The RunExecutableListener executes an external command from a
			hook such as postCommit or postOptimize.
			exe - the name of the executable to run
			dir - dir to use as the current working directory. default="."
			wait - the calling thread waits until the executable returns. default="true"
			args - the arguments to pass to the program.  default=nothing
			env - environment variables to set.  default=nothing
		-->
		<!-- A postCommit event is fired after every commit or optimize command. -->
		<!-- <listener event="postCommit" class="solr.RunExecutableListener">
			<str name="exe">solr/bin/snapshooter</str>
			<str name="dir">.</str>
			<bool name="wait">true</bool>
			<arr name="args"><str>arg1</str><str>arg2</str></arr>
			<arr name="env"><str>MYVAR=val1</str></arr>
		</listener> -->

		<!-- A postOptimize event is fired only after every optimize command. -->
		<!-- <listener event="postOptimize" class="solr.RunExecutableListener">
			<str name="exe">solr/bin/snapshooter</str>
			<str name="dir">.</str>
			<bool name="wait">true</bool>
		</listener> -->
	</updateHandler>

	<query>
		<!--
			Maximum number of clauses in a boolean query... in the past, this affected
			range or prefix queries that expanded to big boolean queries - built in Solr
			query parsers no longer create queries with this limitation.
			An exception is thrown if exceeded.
		-->
		<maxBooleanClauses>1024</maxBooleanClauses>

		<!--
			Cache used by SolrIndexSearcher for filters (DocSets),
			unordered sets of *all* documents that match a query.
			When a new searcher is opened, its caches may be prepopulated
			or "autowarmed" using data from caches in the old searcher.
			autowarmCount is the number of items to prepopulate.  For LRUCache,
			the autowarmed items will be the most recently accessed items.
			Parameters:
			class - the SolrCache implementation LRUCache or FastLRUCache
			size - the maximum number of entries in the cache
			initialSize - the initial capacity (number of entries) of the cache.
			autowarmCount - the number of entries to prepopulate from and old cache.
		-->
		<filterCache class="solr.FastLRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!--
			queryResultCache caches results of searches - ordered lists of
			document ids (DocList) based on a query, a sort, and the range
			of documents requested.
		-->
		<queryResultCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!--
			documentCache caches Lucene Document objects (the stored fields for each document).
			Since Lucene internal document ids are transient, this cache will not be autowarmed.
		-->
		<documentCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!--
			If true, stored fields that are not requested will be loaded lazily.
			This can result in a significant speed improvement if the usual case is to
			not load all stored fields, especially if the skipped fields are large compressed text fields.
		-->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!--
			An optimization that attempts to use a filter to satisfy a search.
			If the requested sort does not include score, then the filterCache
			will be checked for a filter matching the query. If found, the filter
			will be used as the source of document ids, and then the sort will be
			applied to that.
		-->
		<useFilterForSortedQuery>true</useFilterForSortedQuery>

		<!--
			An optimization for use with the queryResultCache.  When a search
			is requested, a superset of the requested number of document ids
			are collected.  For example, if a search for a particular query
			requests matching documents 10 through 19, and queryWindowSize is 50,
			then documents 0 through 49 will be collected and cached.  Any further
			requests in that range can be satisfied via the cache.
		-->
		<queryResultWindowSize>20</queryResultWindowSize>

		<!--
			Maximum number of documents to cache for any entry in the queryResultCache.
		-->
		<queryResultMaxDocsCached>500</queryResultMaxDocsCached>

		<!--
			QuerySenderListener takes an array of NamedList and executes a
			local query request for each NamedList in sequence.
		-->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
			</arr>
		</listener>

		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst><str name="q">static firstSearcher warming query from solrconfig.xml</str></lst>
			</arr>
		</listener>

		<useColdSearcher>true</useColdSearcher>

		<maxWarmingSearchers>10</maxWarmingSearchers>
	</query>

	<!--
		Let the dispatch filter handler /select?qt=XXX
		handleSelect=true will use consistent error handling for /select and /update
		handleSelect=false will use solr1.1 style error formatting
	-->
	<requestDispatcher handleSelect="true" >
		<!-- Make sure your system has some authentication before enabling remote streaming! -->
		<requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048000" />

		<httpCaching never304="true">
			<cacheControl>max-age=30, public</cacheControl>
		</httpCaching>
	</requestDispatcher>

	<!--
		Request Handlers

		Incoming queries will be dispatched to the correct handler
		based on the path or the qt (query type) param.
		Names starting with a '/' are accessed with the a path equal to
		the registered name.  Names without a leading '/' are accessed
		with: http://host/app/[core/]select?qt=name
		If a /select request is processed with out a qt param
		specified, the requestHandler that declares default="true" will
		be used.
		If a Request Handler is declared with startup="lazy", then it will
		not be initialized until the first request that uses it.
		see http://wiki.apache.org/solr/SolrRequestHandler
		and http://wiki.apache.org/solr/SearchHandler
	-->
	<requestHandler name="search" class="solr.SearchHandler" default="true">
		<!-- default values for query parameters -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
		</lst>
	</requestHandler>

	<!--
		XML Update Request Handler.

		The canonical Request Handler for Modifying the Index through
		commands specified using XML.
		Note: Since solr1.1 requestHandlers requires a valid content
		type header if posted in the body. For example, curl now
		requires: -H 'Content-type:text/xml; charset=utf-8'
		see http://wiki.apache.org/solr/UpdateXmlMessages
	-->
	<requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

	<!-- Binary Update Request Handler -->
	<!-- <requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" startup="lazy" /> -->

	<!-- CSV Update Request Handler -->
	<!-- <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" /> -->

	<!-- JSON Update Request Handler -->
	<!-- <requestHandler name="/update/json" class="solr.JsonUpdateRequestHandler" startup="lazy" /> -->

	<!-- XSLT Update Request Handler transforms incoming XML with stylesheet identified by tr= -->
	<!-- <requestHandler name="/update/xslt" class="solr.XsltUpdateRequestHandler" startup="lazy" /> -->

	<!--
		Field Analysis Request Handler

		RequestHandler that provides much the same functionality as
		analysis.jsp. Provides the ability to specify multiple field
		types and field names in the same request and outputs
		index-time and query-time analysis for each of them.
		Request parameters are:
		analysis.fieldname - field name whose analyzers are to be used
		analysis.fieldtype - field type whose analyzers are to be used
		analysis.fieldvalue - text for index-time analysis
		q (or analysis.q) - text for query time analysis
		analysis.showmatch (true|false) - When set to true and when
			query analysis is performed, the produced tokens of the
			field value analysis will be marked as "matched" for every
			token that is produces by the query analysis
	-->
	<requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" startup="lazy" />

	<!--
		Document Analysis Handler

		An analysis handler that provides a breakdown of the analysis
		process of provided documents. This handler expects a (single)
		content stream with the following format:
		<docs>
			<doc>
				<field name="id">1</field>
				<field name="name">The Name</field>
				<field name="text">The Text Value</field>
			</doc>
			<doc>...</doc>
			<doc>...</doc>
			...
		</docs>
		Note: Each document must contain a field which serves as the
		unique key. This key is used in the returned response to associate
		an analysis breakdown to the analyzed document.
		Like the FieldAnalysisRequestHandler, this handler also supports
		query analysis by sending either an "analysis.query" or "q"
		request parameter that holds the query text to be analyzed. It
		also supports the "analysis.showmatch" parameter which when set to
		true, all field tokens that match the query tokens will be marked
		as a "match".
		see http://wiki.apache.org/solr/AnalysisRequestHandler
	-->
	<requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" startup="lazy" />

	<!--
		Admin Handlers

		Admin Handlers - This will register all the standard admin
		RequestHandlers.
	-->
	<requestHandler name="/admin/" class="solr.admin.AdminHandlers" />

	<!-- Ping/Healthcheck Handler -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="qt">search</str>
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<!-- <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
		<lst name="defaults">
		<str name="echoParams">explicit</str>
		<str name="echoHandler">true</str>
		</lst>
	</requestHandler> -->

	<!-- Autocomplete Handler -->
	<requestHandler name="/suggest" class="org.apache.solr.handler.component.SearchHandler">
		<lst name="defaults">
			<str name="spellcheck">true</str>
			<str name="spellcheck.dictionary">suggest</str>
			<str name="spellcheck.count">10</str>
			<str name="spellcheck.onlyMorePopular">true</str>
		</lst>
		<arr name="components">
			<str>suggest</str>
		</arr>
	</requestHandler>

	<!--
		Search Components

		Search components are registered to SolrCore and used by
		instances of SearchHandler (which can access them by name)
		By default, the following components are available:
		<searchComponent name="query"     class="solr.QueryComponent" />
		<searchComponent name="facet"     class="solr.FacetComponent" />
		<searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
		<searchComponent name="highlight" class="solr.HighlightComponent" />
		<searchComponent name="stats"     class="solr.StatsComponent" />
		<searchComponent name="debug"     class="solr.DebugComponent" />
		Default configuration in a requestHandler would look like:
		<arr name="components">
			<str>query</str>
			<str>facet</str>
			<str>mlt</str>
			<str>highlight</str>
			<str>stats</str>
			<str>debug</str>
		</arr>
		If you register a searchComponent to one of the standard names,
		that will be used instead of the default.
		To insert components before or after the 'standard' components, use:
		<arr name="first-components">
			<str>myFirstComponentName</str>
		</arr>
		<arr name="last-components">
			<str>myLastComponentName</str>
		</arr>
		NOTE: The component registered with the name "debug" will
		always be executed after the "last-components"
	-->

	<!-- Autocomplete Component -->
	<searchComponent name="suggest" class="solr.SpellCheckComponent">
		<lst name="spellchecker">
			<str name="name">suggest</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="buildOnCommit">true</str>
			<str name="field">autocomplete</str>
			<str name="queryAnalyzerFieldType">autocomplete</str>
		</lst>
	</searchComponent>

	<!--
		Update Processors

		Chains of Update Processor Factories for dealing with Update
		Requests can be declared, and then used by name in Update
		Request Processors
		see http://wiki.apache.org/solr/UpdateRequestProcessor
	-->

	<!--
		Query Parsers

		Multiple QParserPlugins can be registered by name, and then
		used in either the "defType" param for the QueryComponent (used
		by SearchHandler) or in LocalParams
		see http://wiki.apache.org/solr/SolrQuerySyntax
	-->

	<!-- Legacy config for the admin interface -->
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

</config>